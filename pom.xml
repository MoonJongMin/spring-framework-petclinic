<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.springframework.samples</groupId>
    <artifactId>spring-petclinic</artifactId>
    <version>4.3.6</version>

    <name>petclinic</name>
    <packaging>war</packaging>

    <properties>

        <!-- Generic properties -->
        <java.version>1.7</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <!-- Spring -->
        <spring-io-platform.version>Brussels-SR3</spring-io-platform.version>
        <spring-data-jdbc.version>1.1.0.RELEASE</spring-data-jdbc.version>

        <!-- Web dependencies -->
        <!-- Version update should also be done in wro.xml, petclinic.less and static resources: htmlHeader.tag and footer.tag-->
        <webjars-bootstrap.version>3.3.6</webjars-bootstrap.version>
        <webjars-jquery-ui.version>1.11.4</webjars-jquery-ui.version>
        <webjars-jquery.version>2.2.4</webjars-jquery.version>
        <wro4j.version>1.8.0</wro4j.version>


        <!-- Java EE / Java SE dependencies -->
        <tomcat.version>7.0.59</tomcat.version>

        <!-- Test -->
        <assertj.version>2.2.0</assertj.version>

        <!-- Others -->
        <!-- mysql-driver.version>5.1.36</mysql-driver.version --> <!-- 이 버전 문제 있는지 The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server. 오류나면서 안되어서 버젼 변경 함. -->
        <mysql-driver.version>5.1.5</mysql-driver.version>

        <postgresql-driver.version>9.4.1211.jre7</postgresql-driver.version>

        <cobertura.version>2.7</cobertura.version>
    </properties>

    <dependencyManagement>
        <!-- Import the maven Spring IO Platform Bill Of Materials (BOM) -->
        <dependencies>
            <dependency>
                <groupId>io.spring.platform</groupId>
                <artifactId>platform-bom</artifactId>
                <version>${spring-io-platform.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.apache.tomcat</groupId>
            <artifactId>tomcat-servlet-api</artifactId>
            <version>${tomcat.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>javax.servlet.jsp</groupId>
            <artifactId>javax.servlet.jsp-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.tomcat</groupId>
            <artifactId>tomcat-jasper-el</artifactId>
            <version>${tomcat.version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>javax.servlet.jsp.jstl</groupId>
            <artifactId>javax.servlet.jsp.jstl-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.taglibs</groupId>
            <artifactId>taglibs-standard-jstlel</artifactId>
        </dependency>
        <!--  JSon -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>com.jayway.jsonpath</groupId>
            <artifactId>json-path</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- SPRING, SPRING, SPRINGITY SPRING -->
        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-jpa</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-jdbc-core</artifactId>
            <version>${spring-data-jdbc.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
                <!--  because Spring Data usually comes with a slightly older version of Spring -->
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
        </dependency>
        <!-- used for EhCacheCacheManager -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-oxm</artifactId>
        </dependency>

        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Database connection pool
        See here for more details on commons-dbcp versus tomcat-jdbc:
        http://blog.ippon.fr/2013/03/13/improving-the-performance-of-the-spring-petclinic-sample-application-part-3-of-5/
    -->
        <dependency>
            <groupId>org.apache.tomcat</groupId>
            <artifactId>tomcat-jdbc</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Logging with SLF4J & LogBack -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- HIBERNATE -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
        </dependency>

        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-ehcache</artifactId>
        </dependency>
        <dependency>
            <groupId>net.sf.ehcache</groupId>
            <artifactId>ehcache</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>


        <!-- Webjars -->
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>jquery</artifactId>
            <version>${webjars-jquery.version}</version>
        </dependency>
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>jquery-ui</artifactId>
            <version>${webjars-jquery-ui.version}</version>
        </dependency>
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>bootstrap</artifactId>
            <version>${webjars-bootstrap.version}</version>
        </dependency>

        <!-- Test Artifacts -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>${assertj.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-all</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- temporary fix: below dependency should not be necessary as it is a transitive dependency.
        For some reason we can't build the app unless it is a first level dependency -->
        <dependency>
            <groupId>com.googlecode.json-simple</groupId>
            <artifactId>json-simple</artifactId>
        </dependency>
        
        <!-- aws java sdk -->
		<dependency>
		    <groupId>com.amazonaws</groupId>
		    <artifactId>aws-java-sdk-logs</artifactId>
		    <version>1.11.188</version>
		</dependency>
    </dependencies>

    <!-- Maven plugin versions are mentioned in order to guarantee the build reproducibility in the long term -->
    <build>
        <defaultGoal>install</defaultGoal>
        <finalName>petclinic</finalName>
        <resources>
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <!-- declared explicitly so Spring config files can be placed next to their corresponding JUnit test class  -->
                <directory>${project.basedir}/src/test/java</directory>
            </testResource>
            <testResource>
                <directory>${project.basedir}/src/test/resources</directory>
            </testResource>
        </testResources>
        <!--  pluginManagement -->
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.0</version>
                <configuration>
                    <compilerArguments>
                        <Xlint/>
                    </compilerArguments>
                    <verbose>true</verbose>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <showWarnings>true</showWarnings>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.13</version>
                <configuration>
                    <includes>
                    	   <!-- tes 코드를 통과히지 못해서 주석처리 함, 20170824, jmmoon -->
                        <!-- include>**/*Tests.java</include -->
                    </includes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.3</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <downloadSources>true</downloadSources>
                    <downloadJavadocs>true</downloadJavadocs>
                    <wtpversion>2.0</wtpversion>
                    <sourceIncludes>
                        <sourceInclude>**/*.*</sourceInclude>
                    </sourceIncludes>
                    <additionalBuildcommands>
                        <buildCommand>
                            <name>org.springframework.ide.eclipse.core.springbuilder</name>
                        </buildCommand>
                        <buildCommand>
                            <name>org.eclipse.m2e.core.maven2Builder</name>
                        </buildCommand>
                    </additionalBuildcommands>
                    <additionalProjectnatures>
                        <projectnature>org.eclipse.jdt.core.javanature</projectnature>
                        <projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
                        <projectnature>org.eclipse.m2e.core.maven2Nature</projectnature>
                    </additionalProjectnatures>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                </configuration>
            </plugin>                       
            <plugin>
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <version>2.2</version>
                <configuration>
                    <server>tomcat-development-server</server>
                    <port>9966</port>
                    <path>/petclinic</path>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>cobertura-maven-plugin</artifactId>
                <version>${cobertura.version}</version>
                <configuration>
                    <check/>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>clean</goal>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!--Specify the encoding for copying resources-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>

            <plugin>
                <groupId>ro.isdc.wro4j</groupId>
                <artifactId>wro4j-maven-plugin</artifactId>
                <version>${wro4j.version}</version>
                <executions>
                    <execution>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <wroManagerFactory>ro.isdc.wro.maven.plugin.manager.factory.ConfigurableWroManagerFactory</wroManagerFactory>
                    <cssDestinationFolder>${project.build.directory}/petclinic/resources/css</cssDestinationFolder>
                    <wroFile>${basedir}/src/main/wro/wro.xml</wroFile>
                    <extraConfigFile>${basedir}/src/main/wro/wro.properties</extraConfigFile>
                    <contextFolder>${basedir}/src/main/webapp/resources/less</contextFolder>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.webjars</groupId>
                        <artifactId>bootstrap</artifactId>
                        <version>${webjars-bootstrap.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
        <!-- /pluginManagement -->
        <pluginManagement>
        	<plugins>
        		<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
        		<plugin>
        			<groupId>org.eclipse.m2e</groupId>
        			<artifactId>lifecycle-mapping</artifactId>
        			<version>1.0.0</version>
        			<configuration>
        				<lifecycleMappingMetadata>
        					<pluginExecutions>
        						<pluginExecution>
        							<pluginExecutionFilter>
        								<groupId>ro.isdc.wro4j</groupId>
        								<artifactId>
        									wro4j-maven-plugin
        								</artifactId>
        								<versionRange>
        									[1.8.0,)
        								</versionRange>
        								<goals>
        									<goal>run</goal>
        								</goals>
        							</pluginExecutionFilter>
        							<action>
        								<ignore></ignore>
        							</action>
        						</pluginExecution>
        					</pluginExecutions>
        				</lifecycleMappingMetadata>
        			</configuration>
        		</plugin>
        	</plugins>
        </pluginManagement>
    </build>
    <reporting>
        <plugins>
            <!-- integrate maven-cobertura-plugin to project site -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>cobertura-maven-plugin</artifactId>
                <version>${cobertura.version}</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>cobertura</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
        </plugins>
    </reporting>
    <profiles>
        <profile>
            <id>HSQLDB</id>
            <!-- activation>
                <activeByDefault>true</activeByDefault>
            </activation -->
            <properties>
                <db.script>hsqldb</db.script>
                <jpa.database>HSQL</jpa.database>
                <jdbc.driverClassName>org.hsqldb.jdbcDriver</jdbc.driverClassName>
                <jdbc.url>jdbc:hsqldb:mem:petclinic</jdbc.url>
                <jdbc.username>sa</jdbc.username>
                <jdbc.password/>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>org.hsqldb</groupId>
                    <artifactId>hsqldb</artifactId>
                    <scope>runtime</scope>
                </dependency>
            </dependencies>
        </profile>
        <profile>
            <id>MySQL</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>            
            <properties>
                <db.script>mysql</db.script>
                <jpa.database>MYSQL</jpa.database>
                <jdbc.driverClassName>com.mysql.jdbc.Driver</jdbc.driverClassName>
                <!-- jdbc.url>jdbc:mysql://localhost:3306/petclinic?useUnicode=true</jdbc.url -->
                <!-- jdbc.url>jdbc:mysql://mbp3-cluster.cluster-ctnp9cd6t3oj.ap-northeast-2.rds.amazonaws.com:3306/petclinic?useUnicode=true</jdbc.url -->
                <!-- jdbc.username>admin</jdbc.username -->
                <!-- jdbc.password>petclinic</jdbc.password -->
                <!-- Elastick Beanstakl에서 DB 접속 설정도 system property를 통해서 정보를 찾도록 변경, Cloudformation으로
                     다른 region에 생성 시 DB가 달라져야 할 경우라면 해당 DB에 대한 접속정보가 web application의 file이 아니라
                     외부에서 설정을 해야 할 것이므로, 20170827, jmmoon -->
                <jdbc.url>${system.property.jdbc.url}</jdbc.url>
                <jdbc.username>${system.property.jdbc.username}</jdbc.username>
                <jdbc.password>${system.property.jdbc.password}</jdbc.password>
                <jdbc.validationquery>SELECT 1</jdbc.validationquery>                
            </properties>
            <dependencies>
                <dependency>
                    <groupId>mysql</groupId>
                    <artifactId>mysql-connector-java</artifactId>
                    <version>${mysql-driver.version}</version>
                    <scope>runtime</scope>
                </dependency>
            </dependencies>
        </profile>
        <profile>
            <id>PostgreSQL</id>
            <properties>
                <db.script>postgresql</db.script>
                <jpa.database>POSTGRESQL</jpa.database>
                <jdbc.driverClassName>org.postgresql.Driver</jdbc.driverClassName>
                <jdbc.url>${system.property.jdbc.url}</jdbc.url>
                <jdbc.username>${system.property.jdbc.username}</jdbc.username>
                <jdbc.password>${system.property.jdbc.password}</jdbc.password>
                <jdbc.validationquery>SELECT 1</jdbc.validationquery>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>org.postgresql</groupId>
                    <artifactId>postgresql</artifactId>
                    <version>${postgresql-driver.version}</version>
                    <scope>runtime</scope>
                </dependency>
            </dependencies>
        </profile>
        <!--  add oracle profile for testing RDS oracle multi-az -->
        <profile>
            <id>Oracle</id>
            <properties>
                <db.script>oracle</db.script>
                <jpa.database>ORACLE</jpa.database>
                <jdbc.driverClassName>oracle.jdbc.OracleDriver</jdbc.driverClassName>
                <jdbc.url>${system.property.jdbc.url}</jdbc.url>
                <jdbc.username>${system.property.jdbc.username}</jdbc.username>
                <jdbc.password>${system.property.jdbc.password}</jdbc.password>
                <jdbc.validationquery>SELECT 1 FROM DUAL</jdbc.validationquery>
            </properties>
            <!-- oracle jdbc driver는 maven central에 없기 때문에 repository를 추가해 줌, 그리고 maven settings.xml에 username, password를 등록해주어야 한다. -->
            <!-- 또한 http://central.maven.org/maven2/org/apache/maven/wagon/wagon-http/2.8/wagon-http-2.8-shaded.jar 에서 jar 다운도르 받아서 
            MAVEN_HOME/lib/ext/ 에 넣어주어야 한다. https://docs.oracle.com/middleware/1213/core/MAVEN/config_maven_repo.htm#MAVEN9013 참고
            Maven도 eclipse의 embedded로는 안돼서(MAVEN_HOME/lib/ext/ 가 어딘지 모르니... 직접 maven 별도로 설치하고 maven build 실행 창에서 maven runtime을
            새로 설치한 maven으로 선택하고 해야 된다. -->
			<repositories>
			  <repository>
			    <id>maven.oracle.com</id>
			    <releases>
			      <enabled>true</enabled>
			    </releases>
			    <snapshots>
			      <enabled>false</enabled>
			    </snapshots>
			    <url>https://maven.oracle.com</url>
			    <layout>default</layout>
			  </repository>
			</repositories>
			<pluginRepositories>
			  <pluginRepository>
			    <id>maven.oracle.com</id>
			    <url>https://maven.oracle.com</url>
			  </pluginRepository>
			</pluginRepositories>
            <dependencies>
		        <!-- Oracle JDBC driver -->
		        <dependency>
					<groupId>com.oracle.jdbc</groupId>
					<artifactId>ojdbc8</artifactId>
					<version>12.2.0.1</version>
		        </dependency>
            </dependencies>
        </profile>
   </profiles>

    <url>demopetclinic</url>
</project>
