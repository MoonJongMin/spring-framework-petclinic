<?xml version="1.0" encoding="UTF-8"?>
<!--
    Application context definition for PetClinic Datasource.
-->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context.xsd
         http://www.springframework.org/schema/jdbc
         http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
         http://www.springframework.org/schema/jee
         http://www.springframework.org/schema/jee/spring-jee.xsd">

    <!-- ========================= DATASOURCE DEFINITION ========================= -->

    <!-- Configurer that replaces ${...} placeholders with values from a properties file -->
    <!-- (in this case, JDBC-related settings for the dataSource definition below) -->
    <context:property-placeholder location="classpath:spring/data-access.properties" system-properties-mode="OVERRIDE"/>

    <!-- DataSource configuration for the tomcat jdbc connection pool 
    See here for more details on commons-dbcp versus tomcat-jdbc: 
    http://blog.ippon.fr/2013/03/13/improving-the-performance-of-the-spring-petclinic-sample-application-part-3-of-5/-->
    <!-- bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource"
          p:driverClassName="${jdbc.driverClassName}" p:url="${jdbc.url}"
          p:username="${jdbc.username}" p:password="${jdbc.password}"
          p:testOnBorrow="true"
          p:validationQuery="SELECT 1" / -->
    <!-- bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource"
		p:driverClassName="${jdbc.driverClassName}" p:url="${jdbc.url}"
      	p:username="${jdbc.username}" p:password="${jdbc.password}"
      	p:testOnBorrow="true"
  		p:validationQuery="${jdbc.validationquery}"
  		p:validationQueryTimeout = "2"
      	p:removeAbandoned="true"
      	p:removeAbandonedTimeout="120"
      	p:logAbandoned="true"
      	p:testOnConnect="true"
     	p:testWhileIdle="true"
      	p:testOnReturn="true"
      	p:initialSize="8"
      	p:minIdle="8"
      	p:validationInterval="5000"/ -->
    <!-- RDS fail-over가 잘되도록 하기위해 validationQueryTimeout(초)와 mavxAg(밀리초) 추가 -->
<!--     <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource"
		p:driverClassName="${jdbc.driverClassName}" p:url="${jdbc.url}"
      	p:username="${jdbc.username}" p:password="${jdbc.password}"
      	p:testOnBorrow="true"
  		p:validationQuery="${jdbc.validationquery}"
  		p:validationQueryTimeout = "2"
      	p:initialSize="8"
      	p:minIdle="8"
      	p:maxAge="120000"/> -->
    <!-- RDS fail-over가 잘되도록 하기위해 validationQueryTimeout(초)만 추가한 경우 -->
<!--     <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource"
		p:driverClassName="${jdbc.driverClassName}" p:url="${jdbc.url}"
      	p:username="${jdbc.username}" p:password="${jdbc.password}"
      	p:testOnBorrow="true"
  		p:validationQuery="${jdbc.validationquery}"
  		p:validationQueryTimeout = "2"
      	p:initialSize="8"
      	p:minIdle="8"/> -->
    <!-- validationQueryTimeout(초) 제거한 경우 -->
<!--     <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource"
		p:driverClassName="${jdbc.driverClassName}" p:url="${jdbc.url}"
      	p:username="${jdbc.username}" p:password="${jdbc.password}"
      	p:testOnBorrow="true"
  		p:validationQuery="${jdbc.validationquery}"
      	p:initialSize="8"
      	p:minIdle="8"/> -->
    <!-- DB가 Aurora인 경우 Custom ValidatorClass를 사용해서 validation 하는 경우, read-write <=> read-only 변경 후
    	계속 read-only로 reqeust가 가는 경우 validator에서 false 리턴해서 read-write로 넘어가도록 유도 -->
    <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource"
		p:driverClassName="${jdbc.driverClassName}" p:url="${jdbc.url}"
      	p:username="${jdbc.username}" p:password="${jdbc.password}"
      	p:testOnBorrow="true"
  		p:validatorClassName="org.springframework.samples.petclinic.AmazonAuroraReadOnlyValidator"
      	p:initialSize="8"
      	p:minIdle="8"/>

    <!-- Database initializer. If any of the script fails, the initialization stops. -->
    <!-- As an alternative, for embedded databases see <jdbc:embedded-database/>. -->
    <!-- db 접속해서 데이타생성, 서버 구동 시 매번 실행하더라도 테이블이 생성이 이미 되어 있으면 기존 데이터에 영향이 없음.
     단, DB가 Oracle인 경우에는 그냥 직접 db에서 생성해주고 이것 실행안하는게 더 나음. -->
    <jdbc:initialize-database data-source="dataSource">
        <jdbc:script location="${jdbc.initLocation}"/>
        <jdbc:script location="${jdbc.dataLocation}"/>
    </jdbc:initialize-database>

    <beans profile="javaee">
        <!-- JNDI DataSource for JEE environments -->
        <jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/petclinic"/>
    </beans>
</beans>
